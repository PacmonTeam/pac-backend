openapi: 3.1.0
info:
  title: PACMON
  version: 0.0.1
servers:
  - url: https://pacmon.suijin.xyz/api
  - url: http://localhost:3033
tags:
  - name: Project & Template
    description: Solidity source code and configuration files for each step are provided to enable our automation engine to deploy them to the test node
  - name: Node
    description: Deployed projects are deployed to a test node. The test node is a blockchain node that is used to test the deployed contracts
paths:
  /projects:
    get:
      tags:
        - Project & Template
      summary: Get all projects
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectMinimal"
  /projects/{projectId}:
    get:
      tags:
        - Project & Template
      summary: Get project and all its templates
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
          description: Numeric ID of the project
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
  /projects/create:
    post:
      tags:
        - Project & Template
      summary: Create project
      requestBody:
        description: Item to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreateBody"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
  /projects/update:
    post:
      tags:
        - Project & Template
      summary: Update project
      requestBody:
        description: Item to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectUpdateBody"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
  /projects/delete:
    post:
      tags:
        - Project & Template
      summary: Delete project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId:
                  type: integer
                  format: int64
                  examples: [1, 2, 3, 4]
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    examples: [true]
  /projects/deploy:
    post:
      tags:
        - Project & Template
      summary: Deploy project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId:
                  type: integer
                  format: int64
                  examples: [1, 2, 3, 4]
                nodeName:
                  type: string
                  examples: [UAT, PVT]
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
  /nodes:
    get:
      tags:
        - Node
      summary: Get all nodes
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NodeMinimal"
  /nodes/{nodeId}:
    get:
      tags:
        - Node
      summary: Get node
      parameters:
        - in: path
          name: nodeId
          schema:
            type: integer
          required: true
          description: Numeric ID of the node
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
  /nodes/reset:
    post:
      tags:
        - Node
      summary: Reset node to initial state
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nodeId:
                  type: integer
                  format: int64
                  examples: [1, 2, 3, 4]
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    examples: [true]
                  updatedAt:
                    type: string
                    format: date-time
                    examples: ["2021-01-01T00:00:00.000Z"]
  /nodes/delete:
    post:
      tags:
        - Node
      summary: Delete node and all its contracts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nodeId:
                  type: integer
                  format: int64
                  examples: [1, 2, 3, 4]
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    examples: [true]
                  id:
                    type: integer
                    format: int64
                    examples: [1, 2, 3, 4]

components:
  schemas:
    ProjectCreateBody:
      type: object
      properties:
        name:
          type: string
          examples: [Pacmon, Pragma, Papaya]
        templates:
          type: array
          items:
            $ref: "#/components/schemas/TemplateBody"
      required:
        - name
        - templates
    ProjectUpdateBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1, 2, 3, 4]
        name:
          type: string
          examples: [Pacmon, Pragma, Papaya]
        templates:
          type: array
          items:
            $ref: "#/components/schemas/TemplateBody"
      required:
        - id
        - name
        - templates
    Project:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1, 2, 3, 4]
        name:
          type: string
          examples: [Pacmon, Pragma, Papaya]
        templates:
          type: array
          items:
            $ref: "#/components/schemas/Template"
        createdAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
        updatedAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
    ProjectMinimal:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1, 2, 3, 4]
        name:
          type: string
          examples: [Pacmon, Pragma, Papaya]
        templates:
          type: array
          items:
            $ref: "#/components/schemas/TemplateMinimal"
        createdAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
        updatedAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
    Template:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1, 2, 3, 4]
        script:
          type: string
          examples: ["// SOLIDITY CODE"]
        configuration:
          type: string
          examples: ["// YAML CONFIG"]
        sequence:
          type: integer
        status:
          type: string
          enum: [ACTIVE, INACTIVE]
          default: ACTIVE
        address:
          type: string
          nullable: true
          examples: ["0x1234567890"]
        projectId:
          type: integer
          format: int64
          examples: [1, 2, 3, 4]
        createdAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
        updatedAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
    TemplateBody:
      type: object
      properties:
        script:
          type: string
          examples: ["// SOLIDITY CODE"]
        configuration:
          type: string
          examples: ["// YAML CONFIG"]
        sequence:
          type: integer
        status:
          type: string
          enum: [ACTIVE, INACTIVE]
        createdAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
        updatedAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
      required:
        - script
        - configuration
        - sequence
    TemplateMinimal:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1, 2, 3, 4]
        sequence:
          type: integer
        status:
          type: string
          enum: [ACTIVE, INACTIVE]
          default: ACTIVE
        address:
          type: string
          nullable: true
          examples: ["0x1234567890"]
        projectId:
          type: integer
          format: int64
          examples: [1, 2, 3, 4]
        createdAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
        updatedAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
    Node:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1, 2, 3, 4]
        name:
          type: string
          examples: [Pacmon, Pragma, Papaya]
        rpc:
          type: string
          examples: ["http://localhost:8545"]
        project:
          $ref: "#/components/schemas/Project"
        contracts:
          type: array
          items:
            $ref: "#/components/schemas/NodeContract"
        createdAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
        updatedAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
        signers:
          type: array
          items:
            $ref: "#/components/schemas/NodeSigner"
    NodeMinimal:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1, 2, 3, 4]
        name:
          type: string
          examples: [Pacmon, Pragma, Papaya]
        rpc:
          type: string
          examples: ["http://localhost:8545"]
        project:
          $ref: "#/components/schemas/Project"
        createdAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
        updatedAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
    NodeContract:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1, 2, 3, 4]
        address:
          type: string
          examples: ["0x1234567890"]
        name:
          type: string
          examples: [PacmonERC20, PragmaERC69, PapayaERC420]
        script:
          type: string
          examples: ["// SOLIDITY CODE"]
        configuration:
          type: string
          examples: ["// YAML CONFIG"]
        sequence:
          type: integer
        createdAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
        updatedAt:
          type: string
          format: date-time
          examples: ["2021-01-01T00:00:00.000Z"]
    NodeSigner:
      type: object
      properties:
        address:
          type: string
          examples: ["0x1234567890"]
        privateKey:
          type: string
          examples:
            [
              "0x1234567890123456789012345678901234567890123456789012345678901234567890",
            ]
